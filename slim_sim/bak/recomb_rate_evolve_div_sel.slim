initialize() {
 
 		// POP GEN CONSTANTS
		// these are derived from empirical estimates from d. melanogaster
		defineConstant("theta", 0.007);
		defineConstant("mean_recomb", 2.46e-8);
		defineConstant("ne_estimate", 1250000);
		defineConstant("rho_est",  4*ne_estimate*mean_recomb);
		
	
	// hard coded parameters for execution in slimgui
	if (exists("slimgui")){
	
		// demography
		defineConstant("mig_rate_m12", 0.001);
		defineConstant("mig_rate_m21", 0.001);
		defineConstant("p1_size", 100);
		defineConstant("p2_prop", 0.5);
		defineConstant("split_generation", 5000);
		defineConstant("gene_flow_generation", 6000);
	
		// general genomic properties
		defineConstant("mutation_rate", theta/(4*(p1_size))) ;
		defineConstant("recomb_rate",  rho_est/(4*(p1_size)));
		defineConstant("chr_length" , 100000);
		
		// divergent selection
		defineConstant("div_sel_active", 0);
		defineConstant("div_sel_strength", 1);
		defineConstant("div_sel_mutation_prop", 0.005);
		defineConstant("div_sel_n_loci", 100);
		defineConstant("div_sel_loci", c(1:div_sel_n_loci) * integerDiv(chr_length, (div_sel_n_loci+1)));
		
		// recombination rate dynamics
		defineConstant("recomb_rate_change_dir" , 1);
		defineConstant("recomb_rate_cha" , 0.5);
		defineConstant("variable_recomb", 1);

		// output settings
		defineConstant("samp_interval" , 1000);
		defineConstant("out_folder_ba", "/Users/ksamuk/Dropbox (Duke Bio_Ea)/Projects/recomb_pop_diff/recomb_pop_diff/slim_sim/bak/recomb_out");
		
	}
	
	cat(div_sel_loci);
	

	// MUTATIONS
	
	initializeMutationRate(mutation_rate);
	initializeMutationType("m1", 0.5, "f", 0.0);   // neutral mutation
	initializeMutationType("m2", 0.5, "f", div_sel_strength/div_sel_n_loci);   // p1 adaptive, p2 deleterious
	initializeMutationType("m3", 0.5, "f", div_sel_strength/div_sel_n_loci);   // p2 adaptive, p1 deleterious
	
	m1.mutationStackPolicy = "l";
	m1.convertToSubstitution = T;
	
	m2.mutationStackPolicy = "l";
	m2.convertToSubstitution = T;
	
	m3.mutationStackPolicy = "l";
	m3.convertToSubstitution = T;
	
	// DEMOGRAPHY
	
	// population size of the original population
	//defineConstant("p1_size", p1_si);
	
	// is there gene flow? if so, what rate?
	defineConstant("migration_rate_m12", asFloat(mig_rate_m12)); 
	defineConstant("migration_rate_m21", asFloat(mig_rate_m21)); 
	defineConstant("allopatric", mig_rate_m12 == 0 & mig_rate_m21 == 0);
	
	// RECOMBINATION
	
	// the effect of the modifier, relative to the maximum recomb rate
	// ex 0.5 = half the maximum rate 
	defineConstant("recomb_rate_change", asFloat(recomb_rate_cha));
	
	// the direction of the change in recombination
	// -1 = the daughter population gets the modifier (recomb decreases)
	// 1 = the daughter population loses the modifier (recomb increases)
	defineConstant("recomb_rate_change_direction", integer(recomb_rate_change_dir));
	

	// "Note that a recombination rate of 1 centimorgan/Mbp corresponds to a recombination rate of 1e-8 in the units used by SLiM."
	initializeRecombinationRate(recomb_rate);
	
	// CHROMOSOMAL PROPERTIES
	
	// genomic elements
	initializeGenomicElementType("g1", m1, 1.0); // neutral mutations
	initializeGenomicElementType("g2", c(m2,m3), c(div_sel_mutation_prop, div_sel_mutation_prop)); // divergently selected mutations
	
	
	// assign the list of static genomic elements
	// this contrains divergent selection to specific sites
	// modified from Owens & Samuk 2020
	
	statics = div_sel_loci;
	
	// lay down the neutral regions
	for (index in 0:(size(statics)-1))
		
		if (index == 0){
			initializeGenomicElement(g1, 0, statics[index]-1);
			initializeGenomicElement(g1, statics[index]+1, statics[index+1]-1);
		}
	else if (index == size(statics)-1)
		initializeGenomicElement(g1, statics[index]+1, chr_length);
	else
		if(((statics[index+1]-1) - (statics[index]+1)) > 1)
		initializeGenomicElement(g1, statics[index]+1, statics[index+1]-1);
	
	
	// define the divergently selected regions (no mutations allowed here as well)
	if(div_sel_n_loci > 0){
		
		for (index in 0:(size(div_sel_loci)-1))
			initializeGenomicElement(g2, div_sel_loci[index], div_sel_loci[index]);
	}
	
	// OUTPUT
	
	// frequency at which populations are sampled
	// e.g. 1000 = every thousand generations
	defineConstant("sample_interval", samp_interval);
	
	// base output folder
	defineConstant("out_folder_base", out_folder_ba);


}

// fitness callbacks for divergent selection
fitness(m2, p2){ 

	if(div_sel_active == 1) {
	
		return 1/relFitness; 
		
	} 
}

fitness(m3, p1){ 

	if(div_sel_active == 1) {
	
		return 1/relFitness; 
		
	} 
}



recombination() {
	
	// check for the modifier
	// and modify recombination breakpoints accordingly
 
  if (individual.tag == 0){
  
	  return F;
     
  } else if(individual.tag == 1){
  
    if (recomb_rate_change_dir == -1){

  			// a modifier that decreases recombination rate
  			// randomly remove breakpoints, based on recomb_rate_change (draws of 1 result in removing breakpoints)
  			breakpoints = breakpoints[!(rbinom(size(breakpoints), 1, recomb_rate_change))];
  			return T;
        
  	} else if(recomb_rate_change_dir == 1){
  			
  			// a modifier that increases recombination rate
  			// draw a second set of breakpoints, downsampled based on the percent increase
  			// then ADD those to the original breakpoints
  			
  			additional_breakpoints = sim.chromosome.drawBreakpoints();
  			additional_breakpoints = additional_breakpoints[rbinom(size(additional_breakpoints), 1, recomb_rate_change) == 1];
  			
  			// join to original breakpoints
  			// note: not sure what SLiM does with repeat breakpoints (ignores them?)
  			breakpoints = sort(c(breakpoints,additional_breakpoints));
  			return T; 
  		
  	} 
  
  }
}


1 {
	
	// create a new output folder based on the random seed
	seed = format("%.0i",getSeed());
	out_folder = paste0(c(out_folder_base, seed));
	createDirectory(out_folder);
	
	// create the mother population
	sim.addSubpop("p1", p1_size); // the mother population
	
	// if we are modelling an increase in recomb rate 
	// the mother population starts with suppressed recomb 

}

early() {
	
	
	// perform population split (when necessesary)
	
	if (sim.generation == split_generation){
	
		// perform the population split
		// sizes based on the initial size (p1_si) and the split proportion (p2_prop)	
		sim.addSubpopSplit("p2", asInteger(round(p2_prop * p1_size)), p1); 
		p1.setSubpopulationSize(asInteger(round((1-p2_prop) * p1_size))); 
		p2.individuals.tag = 1;

	}
	
	// set pop specific recombination rate tags
		
	p1.individuals.tag = 0;
	
	if (sim.generation >= split_generation){
		
		p2.individuals.tag = 1;	
		
	}
	
	
	// set gene flow based on the defined timing
	if(!(allopatric) & sim.generation == gene_flow_generation){

		p1.setMigrationRates(p2, mig_rate_m12);
		p2.setMigrationRates(p1, mig_rate_m21);
		
	}
	
	
	
	// perform output if generation matches anything in the sampling list
		
	sampling_generations = sort(c(19998, seq(0,50000,1000)));
	out_folder = paste0(c(out_folder_base, getSeed()));
	
	if(match(sim.generation, sampling_generations) != -1){
	
		if(sim.generation >= split_generation){
		
			p1.outputVCFSample(50, replace = F, filePath = paste0(c(out_folder,  "/", "p1_", sim.generation, ".vcf")));
			p2.outputVCFSample(50, replace = F, filePath = paste0(c(out_folder,  "/", "p2_", sim.generation, ".vcf")));

		} else{

		  p1.outputVCFSample(50, replace = F, filePath = paste0(c(out_folder,  "/", "p1_", sim.generation, ".vcf")));
			
		}
	}
	
	
	// purge locally fixed alleles in allopatric models
	// post split only
	if(sim.generation > split_generation & allopatric){
	
		if (sim.generation % 4 == 0) {
			
			// list all the m1 mutations
			all_muts = sim.mutationsOfType(m1);
			
			// flag m1 mutations fixed in p1
			p1_freq = sim.mutationFrequencies(p1, all_muts);
			p1_remove = all_muts[(p1_freq == 1)];
			
			// flag m1 mutations fixed in p2
			p2_freq = sim.mutationFrequencies(p2, all_muts);
			p2_remove = all_muts[(p2_freq == 1)];
			
			// convert m1 mutations fixed in either p1 or p2 to substutions
			p1.genomes.removeMutations(p1_remove, T);
			p2.genomes.removeMutations(p2_remove, T);
		}
		
	}
	


}

50000 late(){

	seed = format("%.0i",getSeed());
	out_folder = paste0(c(out_folder_base, seed));
 
  // write the simulation parameters to a separate file
	param_file = paste0(c(out_folder,  "/simulation.params"));
	
	param_headers = paste(c("theta", "mean_recomb", "ne_estimate", "rho_est", "mig_rate", "p1_si", "p2_si", "mutation_rate", "recomb_rate", "recomb_rate_cha", "recomb_rate_change_dir", "chr_length", "samp_interval", "split_generation", "gene_flow_generation", "seed"));
	
	param_string = paste(c(theta, mean_recomb, ne_estimate, rho_est, mig_rate, p1_si, p2_si, mutation_rate, recomb_rate, recomb_rate_cha, recomb_rate_change_dir, chr_length, samp_interval, split_generation, gene_flow_generation, seed));
	 
	writeFile(param_file, param_headers, append = F);
	writeFile(param_file, param_string, append = T);
 
 //compress output
 
 system(paste0(c("gzip ", out_folder,  "/*.txt")));
 system(paste0(c("gzip ", out_folder,  "/*.vcf")));
	
	sim.simulationFinished();

}




